{
	"info": {
		"_postman_id": "a01b92b9-e931-4153-9a47-8484b89b5bee",
		"name": "COMPASS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "46649334-a01b92b9-e931-4153-9a47-8484b89b5bee"
	},
	"item": [
		{
			"name": "Signin",
			"item": [
				{
					"name": "signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;\r",
									"const json = pm.response.json();\r",
									"\r",
									"// Check expected status\r",
									"pm.test(\"Response status matches expected status\", function () {\r",
									"    pm.expect(status).to.eql(Number(pm.iterationData.get(\"expected_status\")));\r",
									"});\r",
									"\r",
									"if (status === 201) {\r",
									"    // Check required keys\r",
									"    pm.test(\"Positive response has all required fields\", function () {\r",
									"        pm.expect(json).to.have.all.keys(\"accessToken\", \"refreshToken\", \"expiresIn\");\r",
									"    });\r",
									"\r",
									"    // Validate field types\r",
									"    pm.test(\"Field types are correct\", function () {\r",
									"        pm.expect(json.accessToken).to.be.a(\"string\");\r",
									"        pm.expect(json.refreshToken).to.be.a(\"string\");\r",
									"        pm.expect(json.expiresIn).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    // Check if accessToken looks like JWT (has 3 parts)\r",
									"    pm.test(\"Access token is a JWT\", function () {\r",
									"        pm.expect(json.accessToken.split('.')).to.have.lengthOf(3);\r",
									"    });\r",
									"\r",
									"    // Check if token is not empty\r",
									"    pm.test(\"Access and refresh tokens are non-empty\", function () {\r",
									"        pm.expect(json.accessToken.length).to.be.above(20);\r",
									"        pm.expect(json.refreshToken.length).to.be.above(20);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Token expiry is within expected bounds (10â€“7200s)\", function () {\r",
									"        pm.expect(json.expiresIn).to.be.within(10, 7200);\r",
									"    });\r",
									"\r",
									"} else {\r",
									"    if (status === 400) {\r",
									"        pm.test(\"Negative response has error structure\", function () {\r",
									"            pm.expect(json).to.include.any.keys(\"statusCode\", \"message\", \"error\", \"timestamp\", \"path\", \"errorCode\", \"details\");\r",
									"        });\r",
									"        pm.test(\"Error message and statusCode correlation\", function () {\r",
									"            pm.expect(json.statusCode).to.be.eql(400);\r",
									"        });\r",
									"    } else if (status === 401 || status === 404) {\r",
									"        pm.test(\"Negative response has error structure\", function () {\r",
									"            pm.expect(json).to.have.all.keys(\"statusCode\", \"message\", \"error\", \"timestamp\", \"path\", \"errorCode\", \"details\");\r",
									"        });\r",
									"        pm.test(\"Error code format\", function () {\r",
									"            pm.expect(json.errorCode).to.match(/^AUTH_\\d{4}$/);\r",
									"        });\r",
									"        pm.test(\"Error message and statusCode correlation\", function () {\r",
									"            pm.expect(json.statusCode).to.be.oneOf([401, 404]);\r",
									"            pm.expect(json.message.length).to.be.above(2);\r",
									"        });\r",
									"    }\r",
									"    pm.test(\"Error path matches expected endpoint\", function () {\r",
									"        pm.expect(json.path).to.equal(\"/platform-service/auth/signin\");\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "82daa11c-9004-412e-8b07-785c34f2f337"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "fa5b5f5c-ef6c-45e6-a2dc-31baa5254181"
							}
						}
					],
					"id": "ee4f2c77-3bc1-4edd-8c00-97013b82f9d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/platform-service/auth/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"platform-service",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			],
			"id": "e91fc223-3909-4d94-88f3-db6a136d87f6"
		},
		{
			"name": "user-account-role-mappings-me",
			"item": [
				{
					"name": "user-account-role-mappings/me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93782e04-cc0c-4c14-80dd-7dd596a32d94",
								"exec": [
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"userId\", \"email\", \"authProviderUserId\", \"accounts\"],\r",
									"    properties: {\r",
									"        userId: { type: \"string\" },\r",
									"        email: { type: \"string\" },\r",
									"        firstName: { type: [\"string\", \"null\"] },\r",
									"        lastName: { type: [\"string\", \"null\"] },\r",
									"        authProviderUserId: { type: \"string\" },\r",
									"        accounts: {\r",
									"            type: \"array\",\r",
									"            items: {\r",
									"                type: \"object\",\r",
									"                required: [\"account\", \"role\", \"company\", \"isDefault\"],\r",
									"                properties: {\r",
									"                    account: {\r",
									"                        type: \"object\",\r",
									"                        required: [\"id\", \"name\", \"type\"],\r",
									"                        properties: {\r",
									"                            id: { type: \"string\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            type: { type: \"string\" }\r",
									"                        }\r",
									"                    },\r",
									"                    role: {\r",
									"                        type: \"object\",\r",
									"                        required: [\"id\", \"name\"],\r",
									"                        properties: {\r",
									"                            id: { type: \"string\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            description: { type: [\"string\", \"null\"] }\r",
									"                        }\r",
									"                    },\r",
									"                    company: {\r",
									"                        type: \"object\",\r",
									"                        required: [\"id\", \"name\", \"domain\", \"website\", \"country\"],\r",
									"                        properties: {\r",
									"                            id: { type: \"string\" },\r",
									"                            name: { type: \"string\" },\r",
									"                            domain: { type: \"string\" },\r",
									"                            website: { type: \"string\" },\r",
									"                            country: { type: \"string\" }\r",
									"                        }\r",
									"                    },\r",
									"                    isDefault: { type: \"boolean\" }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"if (pm.response.code === 200) {\r",
									"    const json_response = pm.response.json();\r",
									"\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(json_response);\r",
									"\r",
									"    pm.test(\"Validate response schema\", function () {\r",
									"        pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"    });\r",
									"    pm.test(\"Validate userId is a string\", () => {\r",
									"        pm.expect(json_response.userId).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Validate email is a string\", () => {\r",
									"        pm.expect(json_response.email).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Validate firstName is a string\", () => {\r",
									"        pm.expect(json_response.firstName).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Validate lastName is a string\", () => {\r",
									"        pm.expect(json_response.lastName).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Validate authProviderUserId is a string\", () => {\r",
									"        pm.expect(json_response.authProviderUserId).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Validate accounts is an array\", () => {\r",
									"        pm.expect(json_response.accounts).to.be.an(\"array\");\r",
									"    });\r",
									"\r",
									"    json_response.accounts.forEach((account) => {\r",
									"        pm.test(\"Validate account.id is a string\", () => {\r",
									"            pm.expect(account.account.id).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate account.name is a string\", () => {\r",
									"            pm.expect(account.account.name).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate account.type is a string\", () => {\r",
									"            pm.expect(account.account.type).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate role.id is a string\", () => {\r",
									"            pm.expect(account.role.id).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate role.name is a string\", () => {\r",
									"            pm.expect(account.role.name).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate role.description is of type null or string\", () => {\r",
									"            pm.expect(account.role.description).to.satisfy((val) => val === null || typeof val === \"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate company.id is a string\", () => {\r",
									"            pm.expect(account.company.id).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate company.name is a string\", () => {\r",
									"            pm.expect(account.company.name).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate company.domain is a string\", () => {\r",
									"            pm.expect(account.company.domain).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate company.website is a string\", () => {\r",
									"            pm.expect(account.company.website).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate company.country is a string\", () => {\r",
									"            pm.expect(account.company.country).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"Validate isDefault is a boolean\", () => {\r",
									"            pm.expect(account.isDefault).to.be.a(\"boolean\");\r",
									"        });\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"if (pm.response.code === 401) {\r",
									"    const json_response = pm.response.json();\r",
									"\r",
									"    pm.test(\"Error structure\", function () {\r",
									"        pm.expect(json_response).to.have.property(\"statusCode\");\r",
									"        pm.expect(json_response).to.have.property(\"message\");\r",
									"        pm.expect(json_response).to.have.property(\"error\");\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 401) {\r",
									"        pm.test(\" Unauthorised Error\", function () {\r",
									"            pm.expect(json_response.statusCode).to.be.eql(401);\r",
									"        });\r",
									"    }\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.test(\"Bad request\", function () {\r",
									"            pm.expect(json_response.statusCode).to.be.eql(400);\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "025c8c3d-adfe-4c2b-be97-49eda4564764",
								"exec": [
									"if (pm.iterationData.get(\"runPreScript\") === true) {\r",
									"    // Disable auth if flagged in iterationData\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"    pm.request.auth = { type: \"noauth\" };\r",
									"} else {\r",
									"    const token = pm.environment.get(\"bearerToken\");\r",
									"    const expiry = pm.environment.get(\"bearerTokenExpiry\");\r",
									"    const now = Math.floor(Date.now() / 1000);\r",
									"\r",
									"    if (!token || !expiry || now >= Number(expiry)) {\r",
									"        console.log(\"Fetching new token...\");\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"url\") + \"/platform-service/auth/signin\",\r",
									"            method: \"POST\",\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    email: pm.environment.get(\"email\"),\r",
									"                    password: pm.environment.get(\"password\")\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(\"Auth request failed:\", err);\r",
									"            } else {\r",
									"                const json = res.json();\r",
									"                const newToken = json.accessToken;\r",
									"                const expiresIn = json.expiresIn || 1800;\r",
									"                const expiryTime = Math.floor(Date.now() / 1000) + expiresIn - 10;\r",
									"\r",
									"                if (newToken) {\r",
									"                    pm.environment.set(\"bearerToken\", newToken);\r",
									"                    pm.environment.set(\"bearerTokenExpiry\", expiryTime);\r",
									"                    console.log(\"New token set:\", newToken);\r",
									"\r",
									"                    // Add token to request header\r",
									"                    pm.request.headers.upsert({\r",
									"                        key: \"Authorization\",\r",
									"                        value: \"Bearer \" + newToken\r",
									"                    });\r",
									"                } else {\r",
									"                    console.log(\"No token found in response.\");\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        // Token is still valid; just apply it\r",
									"        pm.request.headers.upsert({\r",
									"            key: \"Authorization\",\r",
									"            value: \"Bearer \" + token\r",
									"        });\r",
									"        console.log(\"Using existing token.\");\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e282823e-a6d2-44eb-bd78-fcfa0bb8dac0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/platform-service/user-account-role-mappings/me",
							"host": [
								"{{url}}"
							],
							"path": [
								"platform-service",
								"user-account-role-mappings",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"id": "52f9bc53-9a7f-471e-b7a4-39b804483e60"
		},
		{
			"name": "renewal-details",
			"item": [
				{
					"name": "renewal-details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.iterationData.get(\"runPreScript\") === true) {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"    pm.request.auth = { type: \"noauth\" };\r",
									"} else {\r",
									"    pm.environment.set(\"bearerToken\", \"\");\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"\"\r",
									"    });\r",
									"    if (!pm.environment.get(\"bearerToken\")) {\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"url\") + \"/platform-service/auth/signin\",\r",
									"            method: \"POST\",\r",
									"            header: { 'Content-Type': 'application/json' },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    email: pm.environment.get(\"email\"),\r",
									"                    password: pm.environment.get(\"password\")\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(\"Auth request failed:\", err);\r",
									"            } else {\r",
									"                const json = res.json();\r",
									"                const token = json.accessToken;\r",
									"                if (token) {\r",
									"                    pm.environment.set(\"bearerToken\", token);\r",
									"                    console.log(\"Token fetched and saved:\", token);\r",
									"                } else {\r",
									"                    console.log(\"No token received in auth response.\");\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}\r",
									"const account = pm.iterationData.get(\"account\");\r",
									"const sortKey = pm.iterationData.get(\"sortKey\");\r",
									"const cloudProvider = pm.iterationData.get(\"cloudProvider\");\r",
									"const page = pm.iterationData.get(\"page\");\r",
									"const limit = pm.iterationData.get(\"limit\");\r",
									"const accountId = account || \"default-account-id\";\r",
									"pm.test(\"Validate input types\", function () {\r",
									"    pm.expect(accountId).to.be.a(\"string\");\r",
									"\r",
									"    const validSortKeys = [\r",
									"        \"logo\",\r",
									"        \"contractEndDate\",\r",
									"        \"cost\",\r",
									"        \"marketplaceAvailability\",\r",
									"        \"vendor\",\r",
									"        \"productName\"\r",
									"    ];\r",
									"\r",
									"    if (sortKey !== undefined && sortKey !== null) {\r",
									"        pm.expect(sortKey).to.be.a(\"string\");\r",
									"        pm.expect(validSortKeys).to.include(sortKey, `Invalid sortKey provided: ${sortKey}`);\r",
									"    }\r",
									"\r",
									"    const validCloudProviders = [\"AWS\", \"AZURE\", \"ISV\", \"GCP\"];\r",
									"    if (cloudProvider !== undefined && cloudProvider !== null) {\r",
									"        pm.expect(cloudProvider).to.be.a(\"string\");\r",
									"        pm.expect(validCloudProviders).to.include(\r",
									"            cloudProvider.toUpperCase(),\r",
									"            `Invalid cloudProvider: ${cloudProvider}`\r",
									"        );\r",
									"    }\r",
									"\r",
									"    if (page !== undefined && page !== null) {\r",
									"        const pageNumber = Number(page);\r",
									"\r",
									"        pm.test(\"Page should be a valid positive number\", function () {\r",
									"            pm.expect(pageNumber, \"Page should be a number\").to.be.a(\"number\");\r",
									"            pm.expect(Number.isNaN(pageNumber), \"Page should not be NaN\").to.be.false;\r",
									"            pm.expect(pageNumber, \"Page should be greater than or equal to 1\").to.be.at.least(1);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (limit !== undefined && limit !== null) {\r",
									"        const limitNumber = Number(limit);\r",
									"\r",
									"        pm.test(\"Limit should be a valid positive number\", function () {\r",
									"            pm.expect(limitNumber, \"Limit should be a number\").to.be.a(\"number\");\r",
									"            pm.expect(Number.isNaN(limitNumber), \"Limit should not be NaN\").to.be.false;\r",
									"            pm.expect(limitNumber, \"Limit should be greater than or equal to 1\").to.be.at.least(1);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"pm.request.url = pm.request.url.toString().replace(\":accountId\", accountId);\r",
									"pm.request.url = new URL(pm.request.url.toString());\r",
									"const url = pm.request.url;\r",
									"\r",
									"url.searchParams.set(\"sortKey\", sortKey);\r",
									"url.searchParams.set(\"cloudProvider\", cloudProvider);\r",
									"url.searchParams.set(\"page\", page);\r",
									"url.searchParams.set(\"limit\", limit);\r",
									"\r",
									"pm.request.url = url.toString();\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fbafc1fd-5bac-4e3a-be6c-73a8658763c2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response has all top-level fields\", function () {\r",
									"        const json = pm.response.json();\r",
									"        pm.expect(json).to.have.all.keys(\r",
									"            \"message\",\r",
									"            \"currentPage\",\r",
									"            \"totalPages\",\r",
									"            \"totalRecords\",\r",
									"            \"upcomingCount\",\r",
									"            \"expiredCount\",\r",
									"            \"data\"\r",
									"        );\r",
									"    });\r",
									"    pm.test(\"Pagination values are numbers and logically valid\", function () {\r",
									"        const json = pm.response.json();\r",
									"        pm.expect(json.currentPage).to.be.a(\"number\");\r",
									"        pm.expect(json.totalPages).to.be.a(\"number\");\r",
									"        pm.expect(json.totalRecords).to.be.a(\"number\");\r",
									"    });\r",
									"    pm.test(\"Data is an array and not empty\", function () {\r",
									"        const json = pm.response.json();\r",
									"        pm.expect(json.data).to.be.an(\"array\");\r",
									"        pm.expect(json.data.length).to.be.above(-1);\r",
									"    });\r",
									"    pm.test(\"Each record has required fields\", function () {\r",
									"        const data = pm.response.json().data;\r",
									"        data.forEach(item => {\r",
									"            pm.expect(item).to.have.all.keys(\r",
									"                \"id\",\r",
									"                \"inventoryLineItemId\",\r",
									"                \"inventoryFileId\",\r",
									"                \"isMatched\",\r",
									"                \"originalProviderId\",\r",
									"                \"newCloudProviderId\",\r",
									"                \"cost\",\r",
									"                \"productName\",\r",
									"                \"vendorName\",\r",
									"                \"contractStartDate\",\r",
									"                \"contractEndDate\",\r",
									"                \"matches\",\r",
									"                \"cloudProviderId\",\r",
									"                \"accountId\",\r",
									"                \"renewalDate\",\r",
									"                \"createdAt\",\r",
									"                \"createdBy\",\r",
									"                \"updatedAt\",\r",
									"                \"updatedBy\",\r",
									"                \"marketPlaceAvailability\"\r",
									"            );\r",
									"        });\r",
									"    });\r",
									"    function isISODate(str) {\r",
									"        return /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/.test(str);\r",
									"    }\r",
									"\r",
									"    pm.test(\"All date fields are valid ISO format\", function () {\r",
									"        const data = pm.response.json().data;\r",
									"        data.forEach(item => {\r",
									"            pm.expect(isISODate(item.contractStartDate)).to.be.true;\r",
									"            pm.expect(isISODate(item.contractEndDate)).to.be.true;\r",
									"            pm.expect(isISODate(item.renewalDate)).to.be.true;\r",
									"            pm.expect(isISODate(item.createdAt)).to.be.true;\r",
									"            pm.expect(isISODate(item.updatedAt)).to.be.true;\r",
									"        });\r",
									"    });\r",
									"    pm.test(\"Cost field is a valid currency format\", function () {\r",
									"        const data = pm.response.json().data;\r",
									"        data.forEach(item => {\r",
									"            pm.expect(item.cost).to.match(/^\\$\\d{1,3}(,\\d{3})*(\\.\\d{2})?$/);\r",
									"        });\r",
									"    });\r",
									"    pm.test(\"MarketplaceAvailability is an array and matches keys\", function () {\r",
									"        const data = pm.response.json().data;\r",
									"        data.forEach(item => {\r",
									"            pm.expect(item.marketPlaceAvailability).to.be.an(\"array\");\r",
									"\r",
									"            if (item.isMatched) {\r",
									"                Object.keys(item.matches).forEach(cloud => {\r",
									"                    pm.expect(item.marketPlaceAvailability).to.include(cloud);\r",
									"                });\r",
									"            } else {\r",
									"                pm.expect(Object.keys(item.matches).length).to.eql(0);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"    pm.test(\"CloudProviderId matches at least one in matches if isMatched\", function () {\r",
									"        const data = pm.response.json().data;\r",
									"        data.forEach(item => {\r",
									"            if (item.isMatched) {\r",
									"                const providerMatch = Object.entries(item.matches).some(\r",
									"                    ([provider, _]) => item.marketPlaceAvailability.includes(provider)\r",
									"                );\r",
									"                pm.expect(providerMatch).to.be.true;\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"else {\r",
									"    console.log(\"Full Response:\", pm.response.text());\r",
									"\r",
									"    try {\r",
									"        const json = pm.response.json();\r",
									"        console.log(\"Parsed JSON Response:\", JSON.stringify(json, null, 2));\r",
									"    } catch (e) {\r",
									"        console.log(\"Response is not valid JSON.\");\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "22d5e16c-89a5-494d-8880-438f01ee91dc"
							}
						}
					],
					"id": "71fb77a7-d972-4877-9a6f-6ed09d444daa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://stg-api.flywl.com/platform-service/inventory-item/accounts/:accountId/renewal-details?sortKey={{sortKey}}&sortOrder=ASC&cloudProvider={{cloudProvider}}&page={{page}}&limit={{limit}}",
							"protocol": "https",
							"host": [
								"stg-api",
								"flywl",
								"com"
							],
							"path": [
								"platform-service",
								"inventory-item",
								"accounts",
								":accountId",
								"renewal-details"
							],
							"query": [
								{
									"key": "sortKey",
									"value": "{{sortKey}}"
								},
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "cloudProvider",
									"value": "{{cloudProvider}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							],
							"variable": [
								{
									"key": "accountId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "b7c850cf-d999-4857-955b-b908e4238ee8"
		},
		{
			"name": "provider-split",
			"item": [
				{
					"name": "provider-split",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.iterationData.get(\"runPreScript\") === true) {\r",
									"    pm.request.headers.remove(\"Authorization\");\r",
									"    pm.request.auth = { type: \"noauth\" };\r",
									"} else {\r",
									"    pm.environment.set(\"bearerToken\", \"\");\r",
									"    pm.request.headers.upsert({\r",
									"        key: \"Authorization\",\r",
									"        value: \"\"\r",
									"    });\r",
									"    if (!pm.environment.get(\"bearerToken\")) {\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"url\") + \"/platform-service/auth/signin\",\r",
									"            method: \"POST\",\r",
									"            header: { 'Content-Type': 'application/json' },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    email: pm.environment.get(\"email\"),\r",
									"                    password: pm.environment.get(\"password\")\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(\"Auth request failed:\", err);\r",
									"            } else {\r",
									"                const json = res.json();\r",
									"                const token = json.accessToken;\r",
									"                if (token) {\r",
									"                    pm.environment.set(\"bearerToken\", token);\r",
									"                    console.log(\"Token fetched and saved:\", token);\r",
									"                } else {\r",
									"                    console.log(\"No token received in auth response.\");\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}\r",
									"if (pm.iterationData.get(\"inventoryFileId\") === \"null\") {\r",
									"    pm.variables.set(\"inventoryFileId\", null);\r",
									"} else {\r",
									"    pm.variables.set(\"inventoryFileId\", pm.iterationData.get(\"inventoryFileId\"));\r",
									"}\r",
									"\r",
									"if (pm.iterationData.get(\"accountId\") === \"null\") {\r",
									"    pm.variables.set(\"accountId\", null);\r",
									"} else {\r",
									"    pm.variables.set(\"accountId\", pm.iterationData.get(\"accountId\"));\r",
									"}\r",
									"const inventoryFileId = pm.iterationData.get(\"inventoryFileId\");\r",
									"const accountId = pm.iterationData.get(\"accountId\");\r",
									"pm.request.url = pm.request.url.toString().replace(\":accountId\", accountId);\r",
									"pm.request.url = new URL(pm.request.url.toString());\r",
									"const url = pm.request.url;\r",
									"url.searchParams.set(\"inventoryFileId\", inventoryFileId);\r",
									"pm.request.url = url.toString();"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c37cbb82-87d7-447d-ac5d-73e029eacaad"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"const statusCode = pm.response.code;\r",
									"const testCase = pm.iterationData.get(\"testCase\") || \"Unnamed Test Case\";\r",
									"\r",
									"console.log(`Running: ${testCase} | Status: ${statusCode}`);\r",
									"\r",
									"// === Status Code Handling ===\r",
									"pm.test(`${testCase} - Status code is valid`, function () {\r",
									"    pm.expect(statusCode).to.be.oneOf([200, 400, 401, 403, 404]);\r",
									"});\r",
									"\r",
									"// === Handle Success Case ===\r",
									"if (statusCode === 200 && res.message === \"Success\") {\r",
									"    pm.test(`${testCase} - Message is 'Success'`, function () {\r",
									"        pm.expect(res.message).to.eql(\"Success\");\r",
									"    });\r",
									"\r",
									"    pm.test(`${testCase} - Response contains data`, function () {\r",
									"        pm.expect(res).to.have.property(\"data\");\r",
									"        pm.expect(res.data).to.be.an(\"object\");\r",
									"    });\r",
									"\r",
									"    const data = res.data;\r",
									"    const expectedProviders = [\"ISV\", \"AZURE\", \"AWS\", \"GCP\"];\r",
									"    const currencyRegex = /^\\$\\d{1,3}(,\\d{3})*(\\.\\d{2})$/;\r",
									"\r",
									"    pm.test(`${testCase} - All expected providers exist`, function () {\r",
									"        expectedProviders.forEach(provider => {\r",
									"            pm.expect(data).to.have.property(provider);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(`${testCase} - All providers have valid fields`, function () {\r",
									"        Object.entries(data).forEach(([provider, item]) => {\r",
									"            pm.expect(item).to.have.property(\"percentageCount\");\r",
									"            pm.expect(item.percentageCount).to.be.a(\"number\").and.within(0, 100);\r",
									"\r",
									"            pm.expect(item).to.have.property(\"cost\");\r",
									"            pm.expect(item.cost).to.match(currencyRegex);\r",
									"\r",
									"            pm.expect(item).to.have.property(\"count\");\r",
									"            pm.expect(item.count).to.be.a(\"number\").and.to.be.above(0);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(`${testCase} - Total percentageCount â‰ˆ 100`, function () {\r",
									"        const total = Object.values(data)\r",
									"            .reduce((sum, item) => sum + item.percentageCount, 0);\r",
									"        pm.expect(total).to.be.within(99.9, 100.1);\r",
									"    });\r",
									"}\r",
									"\r",
									"// === Handle Error Scenarios ===\r",
									"else {\r",
									"    pm.test(`${testCase} - Response includes error structure`, function () {\r",
									"        pm.expect(res).to.have.keys(\"statusCode\", \"message\", \"error\", \"timestamp\", \"path\");\r",
									"        pm.expect(res.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T.*Z$/);  // ISO format\r",
									"        pm.expect(res.path).to.include(\"/platform-service/\");\r",
									"        pm.expect(res.message).to.be.a(\"string\").and.not.empty;\r",
									"        pm.expect(res.error).to.be.a(\"string\").and.not.empty;\r",
									"    });\r",
									"\r",
									"    // === Handle Specific Error Codes ===\r",
									"    if (statusCode === 401) {\r",
									"        pm.test(`${testCase} - 401 Unauthorized`, function () {\r",
									"            pm.expect(res.statusCode).to.eql(401);\r",
									"            pm.expect(res.message).to.eql(\"No token provided\");\r",
									"            pm.expect(res.error).to.eql(\"UnauthorizedException\");\r",
									"        });\r",
									"    } else if (statusCode === 403) {\r",
									"        pm.test(`${testCase} - 403 Forbidden`, function () {\r",
									"            pm.expect(res.statusCode).to.eql(403);\r",
									"            pm.expect(res.message).to.eql(\"Forbidden resource\");\r",
									"            pm.expect(res.error).to.eql(\"ForbiddenException\");\r",
									"        });\r",
									"    } else if (statusCode === 404) {\r",
									"        pm.test(`${testCase} - 404 Not Found`, function () {\r",
									"            pm.expect(res.statusCode).to.eql(404);\r",
									"            pm.expect(res.message).to.include(\"Cannot GET\");\r",
									"            pm.expect(res.error).to.eql(\"NotFoundException\");\r",
									"        });\r",
									"    } else if(statusCode === 400){\r",
									"           pm.test(`${testCase} - 400 Not Found`, function () {\r",
									"            pm.expect(res.statusCode).to.eql(400);\r",
									"            pm.expect(res.message).to.include(\"Validation failed (uuid is expected)\");\r",
									"            pm.expect(res.error).to.eql(\"BadRequestException\");\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9f7ab255-8c7f-4def-8ddd-fe45cfaf4dea"
							}
						}
					],
					"id": "8577b372-58d2-48df-ba5f-53837d393f54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/platform-service/inventory-item/accounts/:accountId/get-provider-split?inventoryFileId={{inventoryFileId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"platform-service",
								"inventory-item",
								"accounts",
								":accountId",
								"get-provider-split"
							],
							"query": [
								{
									"key": "inventoryFileId",
									"value": "{{inventoryFileId}}",
									"description": "Inventory Id"
								}
							],
							"variable": [
								{
									"key": "accountId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "abbdb8fe-4011-48e2-98b1-3440f6bf71ab"
		}
	]
}